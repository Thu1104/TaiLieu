//Bai toan dong nuoc theo chieu rong - queue
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

#define tankcapacity_X 9
#define tankcapacity_Y 4
#define empty 0
#define goal 6
#define Maxlength 100
const char* action[] = {"First state","pour Water Full X","pour Water Full Y","pour Water Empty X","pour Water Empty Y","pour Water X to Y","pour Water Y to X"};

typedef struct{
	int x;
	int y;
}State;
void makeNullState(State *state){
	state->x = 0;
	state->y = 0;
}
int min(int a, int b){
	return (a<b ? a:b);
}
int max(int a, int b){
	return (a>b ? a:b);
}
void print_State(State state){
	printf("\n  X:%d --- Y:%d", state.x, state.y);
}
//Ham kiem tra trang thai muc tieu
int goalcheck(State state){
	return (state.x == goal || state.y == goal);
}
int compareStates(State state1, State state2){
	return (state1.x == state2.x && state1.y == state2.y);
}
int pourWaterFullX(State cur_state, State *result){
	if(cur_state.x < tankcapacity_X){
		result->x = tankcapacity_X;
		result->y = cur_state.y;
		return 1;
	}
	return 0;
}
int pourWaterFullY(State cur_state, State *result){
	if(cur_state.y < tankcapacity_Y){
		result->y = tankcapacity_Y;
		result->x = cur_state.x;
		return 1;
	}
	return 0;
}
int pourWaterEmptyX(State cur_state, State *result){
	if(cur_state.x > 0){
		result->x = empty;
		result->y = cur_state.y;
		return 1;
	}
	return 0;
}
int pourWaterEmptyY(State cur_state, State *result){
	if(cur_state.y > 0){
		result->y = empty;
		result->x = cur_state.x;
		return 1;
	}
	return 0;
}
int pourWaterXY(State cur_state, State *result){
	if(cur_state.x > 0 && cur_state.y < tankcapacity_Y){
		result->x = max(cur_state.x - (tankcapacity_Y - cur_state.y), empty);
		result->y = min(cur_state.x + cur_state.y, tankcapacity_Y);
		return 1;
	}
	return 0;
}
int pourWaterYX(State cur_state, State *result){
	if(cur_state.y > 0 && cur_state.x < tankcapacity_X){
		result->y = max(cur_state.y - (tankcapacity_X - cur_state.x), empty);
		result->x = min(cur_state.y + cur_state.x, tankcapacity_X);
		return 1;
	}
	return 0;
}
int call_operator(State cur_state,State *result, int option){
	switch(option){
		case 1: return pourWaterFullX(cur_state, result);
		case 2: return pourWaterFullY(cur_state, result);
		case 3: return pourWaterEmptyX(cur_state, result);
		case 4: return pourWaterEmptyY(cur_state, result);
		case 5: return pourWaterXY(cur_state, result);
		case 6: return pourWaterYX(cur_state, result);
		default: printf("Error calls operators");
			return 0;
	}
}
typedef struct Node{
	State state;
	struct Node* Parent;
	int no_function;
}Node;
typedef struct{
	Node *Elements[Maxlength];
	int front, rear;
}Queue;
void makeNull_Queue(Queue *queue){
	queue->front = -1;
	queue->rear = -1;
}
int empty_Queue(Queue queue){
	return queue.front == -1;
}
int full_Queue(Queue queue){
	return ((queue.rear - queue.front + 1) & Maxlength) == 0;
}
//Tra ve phan tu dau hang doi
Node* get_Front(Queue queue){
	if(empty_Queue(queue))
		printf("Queue is empty");
	else
		return queue.Elements[queue.front];
}
void del_Queue(Queue *queue){
	if(!empty_Queue(*queue)){
		if(queue->front == queue->rear)
			makeNull_Queue(queue);
		else queue->front = (queue->front + 1) % Maxlength;
	}
	else printf("Error, Delete");
}
void push_Queue(Node* x, Queue *queue){
	if(!full_Queue(*queue)){
		if(!empty_Queue(*queue))
			queue->front = 0;
		queue->rear = (queue->rear + 1) % Maxlength;
		queue->Elements[queue->rear] = x;
	}
	else printf("Error, Push");
}
int find_State(State state, Queue openQueue){
	while(!empty_Queue(openQueue)){
		if(compareStates(get_Front(openQueue)->state, state))
			return 1;
		del_Queue(&openQueue);
	}
	return 0;
}
Node* DFS_Algorithm(State state){
	Queue Open_DFS;
	Queue Close_DFS;
	makeNull_Queue(&Open_DFS);
	makeNull_Queue(&Close_DFS);
	Node* root = (Node*)malloc(sizeof(Node));
	root->state = state;
	root->Parent = NULL;
	root->no_function = 0;
	push_Queue(root, &Open_DFS);
	while(!empty_Queue(Open_DFS)){
		Node* node = get_Front(Open_DFS);
		del_Queue(&Open_DFS);
		push_Queue(node, &Close_DFS);
		if(goalcheck(node->state))
			return node;
		int opt;
		for(opt=1; opt<=6; opt++){
			State newstate;
			makeNullState(&newstate);
			if(call_operator(node->state, &newstate, opt)){
				if(find_State(newstate, Close_DFS) || find_State(newstate, Open_DFS))
					continue;
				Node* newNode = (Node*)malloc(sizeof(Node));
				newNode->state = newstate;
				newNode->Parent = node;
				newNode->no_function = opt;
				push_Queue(newNode, &Open_DFS);
			}
		}
	}
	return NULL;
}
void print_WaysToGetGoal(Node* node){
	Queue queuePrint;
	makeNull_Queue(&queuePrint);
	//Duyet nguoc ve nut cha
	while(node->Parent != NULL){
		push_Queue(node, &queuePrint);
		node = node->Parent;
	}
	push_Queue(node, &queuePrint);
	//In thu tu hanh dong
	int no_action = 0;
	while(!empty_Queue(queuePrint)){
		printf("\nAction %d: %s", no_action, action[get_Front(queuePrint)->no_function]);
		print_State(get_Front(queuePrint)->state);
		del_Queue(&queuePrint);
		no_action++;
	}
}
int main(){
	State cur_state = {0, 0};
	Node* p = DFS_Algorithm(cur_state);
	print_WaysToGetGoal(p);
	return 0;
}

